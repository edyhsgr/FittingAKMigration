##############################################################################################################################
##EDDIE'S R CODE FOR FITTING THE MODEL MIGRATION SCHEDULE WITH STUDENT PEAK
##APPLIED TO ALASKA 2011 TO 2015 OUT-MIGRATION
##
##REFERENCES:
##ORIGINAL CODE AND NOTES ARE AT http://www.demog.berkeley.edu/~eddieh/toolbox.html#SPMMSRCode 
##
##FOR MORE INFO ON THE MODEL MIGRATION SCHEDULE WITH STUDENT PEAK, SEE: Wilson, T. (2010). "Model migration schedules incorporating student migration peaks." Demographic Research, 23(8): 191–222.
##AVAILABLE ONLINE: https://www.demographic-research.org/Volumes/Vol23/8/default.htm
##RELATED EXCEL WORKBOOK BY TOM WILSON: http://www.demog.berkeley.edu/~eddieh/toolbox.html#SPMMS 
##
##GREAT RESOURCE ON THE ROGERS-CASTRO MODEL: Rogers A & Castro LJ (1981). Model Migration Schedules. IIASA Research Report. IIASA, Laxenburg, Austria: RR-81-030
##AVAILABLE ONLINE: http://pure.iiasa.ac.at/id/eprint/1543/
##############################################################################################################################

##############################
##FIT TO THE DATA
##############################

##STEP 1 FIT - PROPORTIONAL TO SUM TO 1
step1<-array(,length(migprob))
for (i in 1:length(migprob)) {step1[i]<-migprob[i]/sum(migprob)}

##STEP 2 FIT - MAKE MEAN AGE AND SET LEVEL TERM BASED ON SELECTED NUMBER OF SMALLEST VALUES
step2<-array(,length(step1))
for (i in 1:length(step2)) {if(step1[i] != 0){step2[i]<-step1[i]}}
step2<-array(mean(sort(step2)[1:level]),length(step2))
ages<-c(0:(length(step1)-1))
meanages<-c(0+1:length(step1))

##STEP 3 FIT - SLOPE AND INTERCEPT FOR TRANSFORMATION
#THIS IS R's lm() FUNCTION ESTIMATED FIT - I COMMENTED OUT AND DID BY SAMPLING TO MAKE CONSISTENT WITH STEPS 4 THROUGH 7
#step3<-array(,childmax-childmin)
#for (i in 1:length(step3)) {step3[i]<-log(step1[i]-step2[i])}
#meanchildmin<-childmin+1
#childages<-c(childmin+1:childmax)
#childfit<-lm(step3~childages)
#for (i in 1:length(ages)) {step3[i]<-exp(childfit$coefficients[1])*exp(-(-childfit$coefficients[2])*meanages[i])}
#step3<-step2+step3

##STEP 3 FIT - SELECT BEST PERCENT PARAMETER VALUES OF ITER BASED ON INPUT DISTRIBUTIONS, THEN REPEAT ITER WITH THE UNIFORM BOUNDS OF BEST PERCENT AND SELECT BEST PARAMETER VALUES 
step3triesfit<-function(childparam1tries,childparam2tries){
step3tries<-array(step1-step2,dim=c(length(step1),ITER))
for (i in 1:ITER) {step3tries[1:SIZE,i]<-childparam1tries[i]*exp(-childparam2tries[i]*(meanages[]))}
childresidtries<-array(0,dim=c(length(step1),ITER))
for (i in 1:ITER) {for (j in 1:length(meanages)) {if((meanages[j]>=childmin)&(meanages[j]<=childmax)) {childresidtries[j,i]<-(step3tries[j,i]-(step1-step2)[j])^2}}}
sumchildresidtries<-array(,ITER)
for (i in 1:ITER) {sumchildresidtries[i]<-sum(childresidtries[,i])}
childparam1tries<-runif(ITER,min(childparam1tries[match(head(sort(sumchildresidtries),ITER*BEST),sumchildresidtries)]),max(childparam1tries[match(head(sort(sumchildresidtries),ITER*BEST),sumchildresidtries)]))
childparam2tries<-runif(ITER,min(childparam2tries[match(head(sort(sumchildresidtries),ITER*BEST),sumchildresidtries)]),max(childparam2tries[match(head(sort(sumchildresidtries),ITER*BEST),sumchildresidtries)]))
childparamtries<-data.frame(sumchildresidtries=sumchildresidtries,childparam1tries=childparam1tries,childparam2tries=childparam2tries)
return(c(step3tries,childparamtries))
}
step3firstpass<-step3triesfit(childparam1tries,childparam2tries)
step3repeatpass<-step3triesfit(step3firstpass$childparam1tries,step3firstpass$childparam2tries)
while (abs(max(step3repeatpass$sumchildresidtries)-min(step3repeatpass$sumchildresidtries))>FITTO)
{step3repeatpass<-step3triesfit(step3repeatpass$childparam1tries,step3repeatpass$childparam2tries)
}
step3repeatpass$childparam1tries[1]
step3repeatpass$childparam2tries[1]
step3repeatpass$sumchildresidtries[1]
step3best<-array(step1-step2,dim=c(length(step1)))
step3best[1:SIZE]<-step3repeatpass$childparam1tries[1]*exp(-step3repeatpass$childparam2tries[1]*(meanages[]))
step3<-step2+step3best

##STEP 4 FIT - SELECT BEST PERCENT PARAMETER VALUES OF ITER BASED ON INPUT DISTRIBUTIONS, THEN REPEAT ITER WITH THE UNIFORM BOUNDS OF BEST PERCENT AND SELECT BEST PARAMETER VALUES  
step4triesfit<-function(labparam1tries,labparam2tries,labparam3tries,labparam4tries){
step4tries<-array(step1-step2,dim=c(length(step1),ITER))
for (i in 1:ITER) {step4tries[1:SIZE,i]<-labparam1tries[i]*exp(-labparam2tries[i]*(meanages[]-labparam3tries[i])-exp(-labparam4tries[i]*(meanages[]-labparam3tries[i])))}
labresidtries<-array(0,dim=c(length(step1),ITER))
for (i in 1:ITER) {for (j in 1:length(meanages)) {if((meanages[j]>=labormin)&(meanages[j]<=labormax)&((meanages[j]<min(studentages))|(meanages[j]>max(studentages)))) {labresidtries[j,i]<-(step4tries[j,i]-(step1-step3)[j])^2}}}
sumlabresidtries<-array(,ITER)
for (i in 1:ITER) {sumlabresidtries[i]<-sum(labresidtries[,i])}
labparam1tries<-runif(ITER,min(labparam1tries[match(head(sort(sumlabresidtries),ITER*BEST),sumlabresidtries)]),max(labparam1tries[match(head(sort(sumlabresidtries),ITER*BEST),sumlabresidtries)]))
labparam2tries<-runif(ITER,min(labparam2tries[match(head(sort(sumlabresidtries),ITER*BEST),sumlabresidtries)]),max(labparam2tries[match(head(sort(sumlabresidtries),ITER*BEST),sumlabresidtries)]))
labparam3tries<-runif(ITER,min(labparam3tries[match(head(sort(sumlabresidtries),ITER*BEST),sumlabresidtries)]),max(labparam3tries[match(head(sort(sumlabresidtries),ITER*BEST),sumlabresidtries)]))
labparam4tries<-runif(ITER,min(labparam4tries[match(head(sort(sumlabresidtries),ITER*BEST),sumlabresidtries)]),max(labparam4tries[match(head(sort(sumlabresidtries),ITER*BEST),sumlabresidtries)]))
labparamtries<-data.frame(sumlabresidtries=sumlabresidtries,labparam1tries=labparam1tries,labparam2tries=labparam2tries,labparam3tries=labparam3tries,labparam4tries=labparam4tries)
return(c(step4tries,labparamtries))
}
step4firstpass<-step4triesfit(labparam1tries,labparam2tries,labparam3tries,labparam4tries)
step4repeatpass<-step4triesfit(step4firstpass$labparam1tries,step4firstpass$labparam2tries,step4firstpass$labparam3tries,step4firstpass$labparam4tries)
while (abs(max(step4repeatpass$sumlabresidtries)-min(step4repeatpass$sumlabresidtries))>FITTO)
{step4repeatpass<-step4triesfit(step4repeatpass$labparam1tries,step4repeatpass$labparam2tries,step4repeatpass$labparam3tries,step4repeatpass$labparam4tries)
}
step4repeatpass$labparam1tries[1]
step4repeatpass$labparam2tries[1]
step4repeatpass$labparam3tries[1]
step4repeatpass$labparam4tries[1]
step4repeatpass$sumlabresidtries[1]
step4best<-array(step1-step3,dim=c(length(step1)))
step4best[1:SIZE]<-step4repeatpass$labparam1tries[1]*exp(-step4repeatpass$labparam2tries[1]*(meanages[]-step4repeatpass$labparam3tries[1])-exp(-step4repeatpass$labparam4tries[1]*(meanages[]-step4repeatpass$labparam3tries[1])))
step4<-step3+step4best

##STEP 5 FIT - SELECT BEST PERCENT PARAMETER VALUES OF ITER BASED ON INPUT DISTRIBUTIONS, THEN REPEAT ITER WITH THE UNIFORM BOUNDS OF BEST PERCENT AND SELECT BEST PARAMETER VALUES  
step5triesfit<-function(retparam1tries,retparam2tries,retparam3tries){
step5tries<-array(step1-step2,dim=c(length(step1),ITER))
for (i in 1:ITER) {step5tries[1:SIZE,i]<-retparam1tries[i]*exp(-((meanages[]-retparam3tries[i])/retparam2tries[i])*((meanages[]-retparam3tries[i])/retparam2tries[i]))}
retresidtries<-array(0,dim=c(length(step1),ITER))
for (i in 1:ITER) {for (j in 1:length(meanages)) {if((meanages[j]>=retmin)&(meanages[j]<=retmax)&((meanages[j]<min(studentages))|(meanages[j]>max(studentages)))) {retresidtries[j,i]<-(step5tries[j,i]-(step1-step4)[j])^2}}}
sumretresidtries<-array(,ITER)
for (i in 1:ITER) {sumretresidtries[i]<-sum(retresidtries[,i])}
retparam1tries<-runif(ITER,min(retparam1tries[match(head(sort(sumretresidtries),ITER*BEST),sumretresidtries)]),max(retparam1tries[match(head(sort(sumretresidtries),ITER*BEST),sumretresidtries)]))
retparam2tries<-runif(ITER,min(retparam2tries[match(head(sort(sumretresidtries),ITER*BEST),sumretresidtries)]),max(retparam2tries[match(head(sort(sumretresidtries),ITER*BEST),sumretresidtries)]))
retparam3tries<-runif(ITER,min(retparam3tries[match(head(sort(sumretresidtries),ITER*BEST),sumretresidtries)]),max(retparam3tries[match(head(sort(sumretresidtries),ITER*BEST),sumretresidtries)]))
retparamtries<-data.frame(sumretresidtries=sumretresidtries,retparam1tries=retparam1tries,retparam2tries=retparam2tries,retparam3tries=retparam3tries)
return(c(step5tries,retparamtries))
}
step5firstpass<-step5triesfit(retparam1tries,retparam2tries,retparam3tries)
step5repeatpass<-step5triesfit(step5firstpass$retparam1tries,step5firstpass$retparam2tries,step5firstpass$retparam3tries)
while (abs(max(step5repeatpass$sumretresidtries)-min(step5repeatpass$sumretresidtries))>FITTO)
{step5repeatpass<-step5triesfit(step5repeatpass$retparam1tries,step5repeatpass$retparam2tries,step5repeatpass$retparam3tries)
}
step5repeatpass$retparam1tries[1]
step5repeatpass$retparam2tries[1]
step5repeatpass$retparam3tries[1]
step5repeatpass$sumretresidtries[1]
step5best<-array(step1-step4,dim=c(length(step1)))
step5best[1:SIZE]<-step5repeatpass$retparam1tries[1]*exp(-((meanages[]-step5repeatpass$retparam3tries[1])/step5repeatpass$retparam2tries[1])*((meanages[]-step5repeatpass$retparam3tries[1])/step5repeatpass$retparam2tries[1]))
step5<-step4+step5best

##STEP 6 FIT - SELECT BEST PERCENT PARAMETER VALUES OF ITER BASED ON INPUT DISTRIBUTIONS, THEN REPEAT ITER WITH THE UNIFORM BOUNDS OF BEST PERCENT AND SELECT BEST PARAMETER VALUES  
step6triesfit<-function(eldparam1tries,eldparam2tries){
step6tries<-array(step1-step2,dim=c(length(step1),ITER))
for (i in 1:ITER) {step6tries[1:SIZE,i]<-eldparam1tries[i]*exp(eldparam2tries[i]*meanages[])}
eldresidtries<-array(0,dim=c(length(step1),ITER))
for (i in 1:ITER) {for (j in 1:length(meanages)) {if((meanages[j]>=eldmin)&(meanages[j]<=eldmax)) {eldresidtries[j,i]<-(step6tries[j,i]-(step1-step5)[j])^2}}}
sumeldresidtries<-array(,ITER)
for (i in 1:ITER) {sumeldresidtries[i]<-sum(eldresidtries[,i])}
eldparam1tries<-runif(ITER,min(eldparam1tries[match(head(sort(sumeldresidtries),ITER*BEST),sumeldresidtries)]),max(eldparam1tries[match(head(sort(sumeldresidtries),ITER*BEST),sumeldresidtries)]))
eldparam2tries<-runif(ITER,min(eldparam2tries[match(head(sort(sumeldresidtries),ITER*BEST),sumeldresidtries)]),max(eldparam2tries[match(head(sort(sumeldresidtries),ITER*BEST),sumeldresidtries)]))
eldparamtries<-data.frame(sumeldresidtries=sumeldresidtries,eldparam1tries=eldparam1tries,eldparam2tries=eldparam2tries)
return(c(step6tries,eldparamtries))
}
step6firstpass<-step6triesfit(eldparam1tries,eldparam2tries)
step6repeatpass<-step6triesfit(step6firstpass$eldparam1tries,step6firstpass$eldparam2tries)
while (abs(max(step6repeatpass$sumeldresidtries)-min(step6repeatpass$sumeldresidtries))>FITTO)
{step6repeatpass<-step6triesfit(step6repeatpass$eldparam1tries,step6repeatpass$eldparam2tries)
}
step6repeatpass$eldparam1tries[1]
step6repeatpass$eldparam2tries[1]
step6repeatpass$sumeldresidtries[1]
step6best<-array(step1-step5,dim=c(length(step1)))
step6best[1:SIZE]<-step6repeatpass$eldparam1tries[1]*exp(step6repeatpass$eldparam2tries[1]*meanages[])
step6<-step5+step6best

##STEP 7 FIT - SELECT BEST PERCENT PARAMETER VALUES OF ITER BASED ON INPUT DISTRIBUTIONS, THEN REPEAT ITER WITH THE UNIFORM BOUNDS OF BEST PERCENT AND SELECT BEST PARAMETER VALUES  
step7triesfit<-function(stuparam1tries,stuparam2tries,stuparam3tries,stuparam4tries){
step7tries<-array(step1-step2,dim=c(length(step1),ITER))
for (i in 1:ITER) {step7tries[1:SIZE,i]<-stuparam1tries[i]*exp(-stuparam2tries[i]*(meanages[]-stuparam3tries[i])-exp(-stuparam4tries[i]*(meanages[]-stuparam3tries[i])))}
sturesidtries<-array(0,dim=c(length(step1),ITER))
for (i in 1:ITER) {for (j in 1:length(meanages)) {if((meanages[j]>=stumin)&(meanages[j]<=stumax)) {sturesidtries[j,i]<-(step7tries[j,i]-(step1-step6)[j])^2}}}
sumsturesidtries<-array(,ITER)
for (i in 1:ITER) {sumsturesidtries[i]<-sum(sturesidtries[,i])}
stuparam1tries<-runif(ITER,min(stuparam1tries[match(head(sort(sumsturesidtries),ITER*BEST),sumsturesidtries)]),max(stuparam1tries[match(head(sort(sumsturesidtries),ITER*BEST),sumsturesidtries)]))
stuparam2tries<-runif(ITER,min(stuparam2tries[match(head(sort(sumsturesidtries),ITER*BEST),sumsturesidtries)]),max(stuparam2tries[match(head(sort(sumsturesidtries),ITER*BEST),sumsturesidtries)]))
stuparam3tries<-runif(ITER,min(stuparam3tries[match(head(sort(sumsturesidtries),ITER*BEST),sumsturesidtries)]),max(stuparam3tries[match(head(sort(sumsturesidtries),ITER*BEST),sumsturesidtries)]))
stuparam4tries<-runif(ITER,min(stuparam4tries[match(head(sort(sumsturesidtries),ITER*BEST),sumsturesidtries)]),max(stuparam4tries[match(head(sort(sumsturesidtries),ITER*BEST),sumsturesidtries)]))
stuparamtries<-data.frame(sumsturesidtries=sumsturesidtries,stuparam1tries=stuparam1tries,stuparam2tries=stuparam2tries,stuparam3tries=stuparam3tries,stuparam4tries=stuparam4tries)
return(c(step7tries,stuparamtries))
}
step7firstpass<-step7triesfit(stuparam1tries,stuparam2tries,stuparam3tries,stuparam4tries)
step7repeatpass<-step7triesfit(step7firstpass$stuparam1tries,step7firstpass$stuparam2tries,step7firstpass$stuparam3tries,step7firstpass$stuparam4tries)
while (abs(max(step7repeatpass$sumsturesidtries)-min(step7repeatpass$sumsturesidtries))>FITTO)
{step7repeatpass<-step7triesfit(step7repeatpass$stuparam1tries,step7repeatpass$stuparam2tries,step7repeatpass$stuparam3tries,step7repeatpass$stuparam4tries)
}
step7repeatpass$stuparam1tries[1]
step7repeatpass$stuparam2tries[1]
step7repeatpass$stuparam3tries[1]
step7repeatpass$stuparam4tries[1]
step7repeatpass$sumsturesidtries[1]
step7best<-array(step1-step6,dim=c(length(step1)))
step7best[1:SIZE]<-step7repeatpass$stuparam1tries[i]*exp(-step7repeatpass$stuparam2tries[i]*(meanages[]-step7repeatpass$stuparam3tries[i])-exp(-step7repeatpass$stuparam4tries[i]*(meanages[]-step7repeatpass$stuparam3tries[i])))
step7<-step6+step7best

##REVIEW FIT
#SQUARED SUM OF RESIDUALS FOR ENTIRE MODEL
squaredsumoffullmodelresiduals<-sum((step7-step1)^2)

